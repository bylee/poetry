<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	">
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/js/**" location="/js/" />
	<mvc:resources mapping="/html/**" location="/html/" />
	
	<bean class="org.mockito.Mockito" factory-method="mock">
		<constructor-arg value="com.poetry.service.PoetService" />
	</bean>
	<bean class="org.mockito.Mockito" factory-method="mock">
		<constructor-arg value="com.poetry.service.PoetryService" />
	</bean>
	<bean class="org.mockito.Mockito" factory-method="mock">
		<constructor-arg value="com.poetry.service.ReplyService" />
	</bean>
	
	<bean class="com.poetry.controller.PoetryController" />
	
	<context:component-scan base-package="com.poetry.servlet" />
	
</beans>

